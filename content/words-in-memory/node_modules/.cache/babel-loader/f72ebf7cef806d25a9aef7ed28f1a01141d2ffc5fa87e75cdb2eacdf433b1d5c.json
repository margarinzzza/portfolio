{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041D\\u0438\\u043A\\u0438\\u0442\\u043E\\u0441\\\\Documents\\\\GitHub\\\\portfolio\\\\content\\\\words-in-memory\\\\src\\\\GameScreen.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GameScreen = _ref => {\n  _s();\n  let {\n    timeForWord,\n    finalWordsArr,\n    setFinalWordsArr\n  } = _ref;\n  const [readySlideShow, setReadySlideShow] = useState(false);\n  const [isSlideShowEnd, setIsSlideShowEnd] = useState(false);\n  const [attemptNumber, setAttemptNumber] = useState(3);\n  const [word, setWord] = useState('');\n  const [inputedWord, setInputedWord] = useState('');\n  const wordsSlideShow = () => {\n    setReadySlideShow(true);\n    let i = 0;\n    let interval = setInterval(() => {\n      if (i >= finalWordsArr.length) {\n        setIsSlideShowEnd(true);\n        return clearInterval(interval);\n      }\n      setWord(finalWordsArr[i].word);\n      i++;\n    }, timeForWord * 1000);\n  };\n  const guessWord = value => {\n    let arr = finalWordsArr;\n    setInputedWord('');\n    let candidateIndex = finalWordsArr.findIndex(el => el.word === value);\n    if (candidateIndex !== -1) {\n      arr[candidateIndex].isGuessed = true;\n      setFinalWordsArr(arr);\n    } else setAttemptNumber(attemptNumber - 1);\n    let findUnGuessedWords = finalWordsArr.findIndex(el => el.isGuessed === false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameScreen\",\n    children: [!readySlideShow && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"linkItem\",\n      onClick: () => wordsSlideShow(),\n      children: \"I`m ready\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 27\n    }, this), !isSlideShowEnd && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 27\n    }, this), isSlideShowEnd && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"d-flex justify-center\",\n        children: [\"Attempts: \", attemptNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsList\",\n        children: finalWordsArr.map((el, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${el.isGuessed ? 'guessedWord' : 'unGuessedWord'}`,\n          children: el.isGuessed ? el.word : 'A'.repeat(el.word.length)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guessWordInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputedWord,\n          onChange: e => setInputedWord(e.target.value),\n          type: \"text\",\n          placeholder: \"Guess the word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => guessWord(inputedWord),\n          className: \"linkItem\",\n          children: \"Guess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"Gf/wrlcEsnnyuk3ZTOyC7R9m2rg=\");\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["useState","GameScreen","timeForWord","finalWordsArr","setFinalWordsArr","readySlideShow","setReadySlideShow","isSlideShowEnd","setIsSlideShowEnd","attemptNumber","setAttemptNumber","word","setWord","inputedWord","setInputedWord","wordsSlideShow","i","interval","setInterval","length","clearInterval","guessWord","value","arr","candidateIndex","findIndex","el","isGuessed","findUnGuessedWords","map","idx","repeat","e","target"],"sources":["C:/Users/Никитос/Documents/GitHub/portfolio/content/words-in-memory/src/GameScreen.jsx"],"sourcesContent":["import { useState } from \"react\"\n\nconst GameScreen = ({ timeForWord, finalWordsArr, setFinalWordsArr }) => {\n\n  const [readySlideShow, setReadySlideShow] = useState(false)\n  const [isSlideShowEnd, setIsSlideShowEnd] = useState(false)\n  const [attemptNumber, setAttemptNumber] = useState(3)\n  const [word, setWord] = useState('')\n  const [inputedWord, setInputedWord] = useState('')\n\n\n  const wordsSlideShow = () => {\n    setReadySlideShow(true)\n    let i = 0\n    let interval = setInterval(() => {\n      if (i >= finalWordsArr.length) {\n        setIsSlideShowEnd(true)\n        return clearInterval(interval)\n      }\n      setWord(finalWordsArr[i].word)\n      i++\n    }, timeForWord * 1000)\n  }\n\n  const guessWord = (value) => {\n    let arr = finalWordsArr\n    setInputedWord('')\n    let candidateIndex = finalWordsArr.findIndex(el => el.word === value)\n    if (candidateIndex !== -1) {\n      arr[candidateIndex].isGuessed = true\n      setFinalWordsArr(arr)\n    } else setAttemptNumber(attemptNumber - 1)\n    let findUnGuessedWords = finalWordsArr.findIndex(el => el.isGuessed === false)\n  }\n\n  return (\n    <div className=\"gameScreen\">\n      {!readySlideShow && <h2 className=\"linkItem\" onClick={() => wordsSlideShow()}>I`m ready</h2>}\n      {!isSlideShowEnd && <h3>{word}</h3>}\n      {isSlideShowEnd &&\n        <>\n          <span className=\"d-flex justify-center\">Attempts: {attemptNumber}</span>\n          <div className='wordsList'>\n            {finalWordsArr.map((el, idx) => <div key={idx} className={`${el.isGuessed ? 'guessedWord' : 'unGuessedWord'}`}>\n              {el.isGuessed ? el.word : 'A'.repeat(el.word.length)}\n            </div>)}\n          </div>\n          <div className='guessWordInput'>\n            <input value={inputedWord} onChange={(e) => setInputedWord(e.target.value)} type=\"text\" placeholder=\"Guess the word\" />\n            <span onClick={() => guessWord(inputedWord)} className=\"linkItem\">Guess</span>\n          </div>\n        </>\n\n      }\n    </div>\n  );\n}\n\nexport default GameScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}