{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041D\\u0438\\u043A\\u0438\\u0442\\u043E\\u0441\\\\Documents\\\\GitHub\\\\portfolio\\\\content\\\\words-in-memory\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport EndGameScreen from \"./EndGameScreen\";\nimport GameScreen from \"./GameScreen\";\nimport WelcomeScreen from \"./WelcomeScreen\";\nimport { wordsArr } from \"./words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameStatus, setGameStatus] = useState('welcome');\n  const [win, setWin] = useState(false);\n  const [finalWordsArr, setFinalWordsArr] = useState([]);\n  const [timeForWord, setTimeForWord] = useState('');\n  const [wordsNumber, setWordsNumber] = useState('');\n  const [welcomeScreenErrors, setWelcomeScreenErrors] = useState('');\n  const startGame = () => {\n    if (wordsNumber === '' || timeForWord === '') {\n      return setWelcomeScreenErrors('Fill all fields');\n    }\n    if (wordsNumber > wordsArr.length || wordsNumber < 1 || timeForWord < 1) {\n      return setWelcomeScreenErrors('Fill in the fields correctly');\n    }\n    setWelcomeScreenErrors('');\n    let arr = [];\n    while (arr.length < wordsNumber) {\n      let number = Math.floor(Math.random() * wordsArr.length);\n      if (arr.indexOf(number) === -1) arr.push(number);\n    }\n    let finalArr = [];\n    for (let i = 0; i < wordsArr.length; i++) {\n      for (let j = 0; j < arr.length; j++) {\n        if (i == arr[j]) finalArr.push({\n          word: wordsArr[i],\n          isGuessed: false\n        });\n      }\n    }\n    setFinalWordsArr(finalArr);\n    setGameStatus('game');\n  };\n  const gameStatusHandler = () => {\n    switch (gameStatus) {\n      case 'welcome':\n        return /*#__PURE__*/_jsxDEV(WelcomeScreen, {\n          wordsArr: wordsArr,\n          startGame: startGame,\n          welcomeScreenErrors: welcomeScreenErrors,\n          setWordsNumber: setWordsNumber,\n          setTimeForWord: setTimeForWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 30\n        }, this);\n      case 'game':\n        return /*#__PURE__*/_jsxDEV(GameScreen, {\n          setGameStatus: setGameStatus,\n          setWin: setWin,\n          timeForWord: timeForWord,\n          setFinalWordsArr: setFinalWordsArr,\n          finalWordsArr: finalWordsArr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 27\n        }, this);\n      case 'end':\n        return /*#__PURE__*/_jsxDEV(EndGameScreen, {\n          setGameStatus: true,\n          win: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 26\n        }, this);\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Words in memory game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), gameStatusHandler()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"cDf1yt5YOtoJfHoi+COqPYEamE0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","EndGameScreen","GameScreen","WelcomeScreen","wordsArr","App","gameStatus","setGameStatus","win","setWin","finalWordsArr","setFinalWordsArr","timeForWord","setTimeForWord","wordsNumber","setWordsNumber","welcomeScreenErrors","setWelcomeScreenErrors","startGame","length","arr","number","Math","floor","random","indexOf","push","finalArr","i","j","word","isGuessed","gameStatusHandler"],"sources":["C:/Users/Никитос/Documents/GitHub/portfolio/content/words-in-memory/src/App.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport EndGameScreen from \"./EndGameScreen\";\nimport GameScreen from \"./GameScreen\";\nimport WelcomeScreen from \"./WelcomeScreen\";\nimport { wordsArr } from \"./words\";\n\nconst App = () => {\n\n  const [gameStatus, setGameStatus] = useState('welcome')\n  const [win, setWin] = useState(false)\n  const [finalWordsArr, setFinalWordsArr] = useState([])\n  const [timeForWord, setTimeForWord] = useState('')\n  const [wordsNumber, setWordsNumber] = useState('')\n  const [welcomeScreenErrors, setWelcomeScreenErrors] = useState('')\n\n  const startGame = () => {\n    if (wordsNumber === '' || timeForWord === '') {\n      return setWelcomeScreenErrors('Fill all fields')\n    }\n    if (wordsNumber > wordsArr.length || wordsNumber < 1 || timeForWord < 1) {\n      return setWelcomeScreenErrors('Fill in the fields correctly')\n    }\n    setWelcomeScreenErrors('')\n    let arr = []\n    while (arr.length < wordsNumber) {\n      let number = Math.floor(Math.random() * wordsArr.length);\n      if (arr.indexOf(number) === -1) arr.push(number);\n    }\n    let finalArr = []\n    for (let i = 0; i < wordsArr.length; i++) {\n      for (let j = 0; j < arr.length; j++) {\n        if (i == arr[j]) finalArr.push({word: wordsArr[i], isGuessed: false})\n      }\n    }\n    setFinalWordsArr(finalArr)\n    setGameStatus('game')\n  }\n\n  const gameStatusHandler = () => {\n    switch (gameStatus) {\n      case 'welcome': return <WelcomeScreen wordsArr={wordsArr} startGame={startGame} welcomeScreenErrors={welcomeScreenErrors} setWordsNumber={setWordsNumber} setTimeForWord={setTimeForWord} />\n      case 'game': return <GameScreen setGameStatus={setGameStatus} setWin={setWin} timeForWord={timeForWord} setFinalWordsArr={setFinalWordsArr} finalWordsArr={finalWordsArr} />\n      case 'end': return <EndGameScreen setGameStatus  win />\n\n      default: break;\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Words in memory game</h1>\n      {gameStatusHandler()}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}