{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041D\\u0438\\u043A\\u0438\\u0442\\u043E\\u0441\\\\Documents\\\\GitHub\\\\portfolio\\\\content\\\\words-in-memory\\\\src\\\\GameScreen.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameScreen = _ref => {\n  _s();\n  let {\n    timeForWord,\n    finalWordsArr\n  } = _ref;\n  const [readySlideShow, setReadySlideShow] = useState(false);\n  const [isSlideShowEnd, setIsSlideShowEnd] = useState(false);\n  const [attemptNumber, setAttemptNumber] = useState(3);\n  const [word, setWord] = useState('');\n  const wordsSlideShow = () => {\n    setReadySlideShow(true);\n    let i = 0;\n    let interval = setInterval(() => {\n      if (i >= finalWordsArr.length) {\n        setIsSlideShowEnd(true);\n        return clearInterval(interval);\n      }\n      setWord(finalWordsArr[i].word);\n      i++;\n    }, timeForWord * 1000);\n  };\n  console.log(finalWordsArr);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameScreen\",\n    children: [!readySlideShow && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"linkItem\",\n      onClick: () => wordsSlideShow(),\n      children: \"I`m ready\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 27\n    }, this), !isSlideShowEnd && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 27\n    }, this), isSlideShowEnd && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsList\",\n      children: finalWordsArr.map((el, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${el.isGuessed ? 'guessedWord' : 'unGuessedWord'}`,\n        children: el.isGuessed ? el.word : 'A'.repeatel.word.length\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 43\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(GameScreen, \"sUnKpDGtFCeB/C2yblH/tV9VVXU=\");\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["useState","GameScreen","timeForWord","finalWordsArr","readySlideShow","setReadySlideShow","isSlideShowEnd","setIsSlideShowEnd","attemptNumber","setAttemptNumber","word","setWord","wordsSlideShow","i","interval","setInterval","length","clearInterval","console","log","map","el","idx","isGuessed","repeatel"],"sources":["C:/Users/Никитос/Documents/GitHub/portfolio/content/words-in-memory/src/GameScreen.jsx"],"sourcesContent":["import { useState } from \"react\"\n\nconst GameScreen = ({ timeForWord, finalWordsArr }) => {\n\n  const [readySlideShow, setReadySlideShow] = useState(false)\n  const [isSlideShowEnd, setIsSlideShowEnd] = useState(false)\n  const [attemptNumber, setAttemptNumber] = useState(3)\n  const [word, setWord] = useState('')\n\n  const wordsSlideShow = () => {\n    setReadySlideShow(true)\n    let i = 0\n    let interval = setInterval(() => {\n      if (i >= finalWordsArr.length) {\n        setIsSlideShowEnd(true)\n        return clearInterval(interval)\n      }\n      setWord(finalWordsArr[i].word)\n      i++\n    }, timeForWord * 1000)\n  }\n\n  console.log(finalWordsArr)\n\n  return (\n    <div className=\"gameScreen\">\n      {!readySlideShow && <h2 className=\"linkItem\" onClick={() => wordsSlideShow()}>I`m ready</h2>}\n      {!isSlideShowEnd && <h3>{word}</h3>}\n      {isSlideShowEnd &&\n        <div className='wordsList'>\n          {finalWordsArr.map((el, idx) => <div key={idx} className={`${el.isGuessed ? 'guessedWord' : 'unGuessedWord'}`}>\n          {el.isGuessed ? el.word : 'A'.repeatel.word.length}\n          </div>)}\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default GameScreen;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA;AAEhC,MAAMC,UAAU,GAAG,QAAoC;EAAA;EAAA,IAAnC;IAAEC,WAAW;IAAEC;EAAc,CAAC;EAEhD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMY,cAAc,GAAG,MAAM;IAC3BP,iBAAiB,CAAC,IAAI,CAAC;IACvB,IAAIQ,CAAC,GAAG,CAAC;IACT,IAAIC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B,IAAIF,CAAC,IAAIV,aAAa,CAACa,MAAM,EAAE;QAC7BT,iBAAiB,CAAC,IAAI,CAAC;QACvB,OAAOU,aAAa,CAACH,QAAQ,CAAC;MAChC;MACAH,OAAO,CAACR,aAAa,CAACU,CAAC,CAAC,CAACH,IAAI,CAAC;MAC9BG,CAAC,EAAE;IACL,CAAC,EAAEX,WAAW,GAAG,IAAI,CAAC;EACxB,CAAC;EAEDgB,OAAO,CAACC,GAAG,CAAChB,aAAa,CAAC;EAE1B,oBACE;IAAK,SAAS,EAAC,YAAY;IAAA,WACxB,CAACC,cAAc,iBAAI;MAAI,SAAS,EAAC,UAAU;MAAC,OAAO,EAAE,MAAMQ,cAAc,EAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAe,EAC3F,CAACN,cAAc,iBAAI;MAAA,UAAKI;IAAI;MAAA;MAAA;MAAA;IAAA,QAAM,EAClCJ,cAAc,iBACb;MAAK,SAAS,EAAC,WAAW;MAAA,UACvBH,aAAa,CAACiB,GAAG,CAAC,CAACC,EAAE,EAAEC,GAAG,kBAAK;QAAe,SAAS,EAAG,GAAED,EAAE,CAACE,SAAS,GAAG,aAAa,GAAG,eAAgB,EAAE;QAAA,UAC7GF,EAAE,CAACE,SAAS,GAAGF,EAAE,CAACX,IAAI,GAAG,GAAG,CAACc,QAAQ,CAACd,IAAI,CAACM;MAAM,GADRM,GAAG;QAAA;QAAA;QAAA;MAAA,QAEvC;IAAC;MAAA;MAAA;MAAA;IAAA,QACH;EAAA;IAAA;IAAA;IAAA;EAAA,QAEJ;AAEV,CAAC;AAAA,GAnCKrB,UAAU;AAAA,KAAVA,UAAU;AAqChB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}