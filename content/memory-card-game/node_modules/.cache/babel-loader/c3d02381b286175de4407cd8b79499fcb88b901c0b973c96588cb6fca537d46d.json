{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041D\\u0438\\u043A\\u0438\\u0442\\u043E\\u0441\\\\Documents\\\\GitHub\\\\portfolio\\\\content\\\\memory-card-game\\\\src\\\\StartGameComponent.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StartGameComponent = () => {\n  _s();\n  const [movesNum, setMovesNum] = useState(0);\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0\n  });\n  const [initialCardsArrLength, setInitialCardsArrLength] = useState(null);\n  const [complexity, setComplexity] = useState(null);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [cardsArr, setCardsArr] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const checkGameComplexity = () => {\n    let complexityLevel;\n    let arr = [...new Array(3)];\n    switch (complexity) {\n      case 'lowComplexity':\n        complexityLevel = 1;\n        break;\n      case 'midComplexity':\n        complexityLevel = 2;\n        break;\n      case 'highComplexity':\n        complexityLevel = 3;\n        break;\n      default:\n        break;\n    }\n    return arr.map((el, idx) => {\n      if (idx + 1 <= complexityLevel) {\n        return /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"16\",\n          height: \"16\",\n          fill: \"currentColor\",\n          className: \"bi bi-star-fill\",\n          viewBox: \"0 0 16 16\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"16\",\n          height: \"16\",\n          fill: \"currentColor\",\n          className: \"bi bi-star\",\n          viewBox: \"0 0 16 16\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  };\n  const selectCard = value => {\n    if (selectedCards.length !== 2) {\n      let candidate;\n      let arr;\n      for (let i = 0; i < selectedCards.length; i++) {\n        if (selectedCards[i] == value.idx) candidate = true;\n      }\n      if (candidate) {\n        arr = selectedCards.filter(el => el !== value.idx);\n        return setSelectedCards(arr);\n      }\n      setSelectedCards([...selectedCards, value]);\n    }\n  };\n  useEffect(() => {\n    if (selectedCards.length == 2) {\n      if (selectedCards[0].el == selectedCards[1].el) {\n        let matchedCardsArr = [selectedCards[0], selectedCards[1]];\n        setMatchedCards([...matchedCards, ...matchedCardsArr]);\n        setTimeout(() => {\n          setSelectedCards([]);\n        }, 1000);\n      } else {\n        setTimeout(() => {\n          setMovesNum(movesNum + 1);\n          setSelectedCards([]);\n        }, 1000);\n      }\n    }\n  }, [selectedCards]);\n  useEffect(() => {\n    if (matchedCards.length == initialCardsArrLength) {\n      endGame();\n    }\n  }, [matchedCards]);\n  const checkSelectedCards = value => {\n    let candidate;\n    for (let i = 0; i < selectedCards.length; i++) {\n      if (selectedCards[i].idx == value) {\n        candidate = true;\n      }\n    }\n    if (candidate) {\n      return 'selectedCard';\n    } else return '';\n  };\n  const checkMatchedCards = value => {\n    let candidate;\n    for (let i = 0; i < matchedCards.length; i++) {\n      if (matchedCards[i].el == value) {\n        candidate = true;\n      }\n    }\n    if (candidate) {\n      return 'matchedCard';\n    } else return '';\n  };\n  const createRandomNumbers = (length, max) => {\n    let arr = [];\n    while (arr.length < length / 2) {\n      let number = Math.floor(Math.random() * max) + 1;\n      if (arr.indexOf(number) === -1) arr.push(number);\n    }\n    return arr;\n  };\n  useEffect(() => {\n    let arr = [];\n    switch (complexity) {\n      case 'lowComplexity':\n        arr = createRandomNumbers(12, 100);\n        break;\n      case 'midComplexity':\n        arr = createRandomNumbers(20, 100);\n        break;\n      case 'highComplexity':\n        arr = createRandomNumbers(48, 100);\n        break;\n      default:\n        break;\n    }\n    let finalArr = [...arr, ...arr];\n    setCardsArr(finalArr);\n    setInitialCardsArrLength(finalArr.length);\n  }, [complexity]);\n  const endGame = () => {\n    setIsGameStart(false);\n    setComplexity(null);\n    setSelectedCards([]);\n    setMatchedCards([]);\n    setMovesNum(0);\n    setTimer({\n      seconds: 0,\n      minutes: 0\n    });\n  };\n  const checkTimer = () => {\n    let m;\n    let s;\n    if (timer.seconds < 10) s = `0${timer.seconds}`;else s = timer.seconds;\n    if (timer.minutes < 10) m = `0${timer.minutes}`;else m = timer.minutes;\n    return `${m}:${s}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Matching Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"complexity\",\n        children: checkGameComplexity()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time\",\n        children: checkTimer()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"moves\",\n        children: [movesNum, \" Moves\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          onClick: () => endGame(),\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"20\",\n          height: \"20\",\n          fill: \"currentColor\",\n          className: \"bi bi-arrow-clockwise\",\n          viewBox: \"0 0 16 16\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `gameField ${complexity !== null && complexity}`,\n      children: cardsArr.map((el, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => selectCard({\n            idx,\n            el\n          }),\n          className: `card ${checkSelectedCards(idx)} ${checkMatchedCards(el)}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: el\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(StartGameComponent, \"SXBDTGssXItJwKStieZ7GoitSgQ=\");\n_c = StartGameComponent;\nexport default StartGameComponent;\nvar _c;\n$RefreshReg$(_c, \"StartGameComponent\");","map":{"version":3,"names":["useEffect","useState","StartGameComponent","movesNum","setMovesNum","timer","setTimer","seconds","minutes","initialCardsArrLength","setInitialCardsArrLength","complexity","setComplexity","selectedCards","setSelectedCards","cardsArr","setCardsArr","matchedCards","setMatchedCards","checkGameComplexity","complexityLevel","arr","Array","map","el","idx","selectCard","value","length","candidate","i","filter","matchedCardsArr","setTimeout","endGame","checkSelectedCards","checkMatchedCards","createRandomNumbers","max","number","Math","floor","random","indexOf","push","finalArr","setIsGameStart","checkTimer","m","s"],"sources":["C:/Users/Никитос/Documents/GitHub/portfolio/content/memory-card-game/src/StartGameComponent.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst StartGameComponent = () => {\n\n  const [movesNum, setMovesNum] = useState(0)\n  const [timer, setTimer] = useState({ seconds: 0, minutes: 0 })\n  const [initialCardsArrLength, setInitialCardsArrLength] = useState(null)\n  const [complexity, setComplexity] = useState(null)\n  const [selectedCards, setSelectedCards] = useState([])\n  const [cardsArr, setCardsArr] = useState([])\n  const [matchedCards, setMatchedCards] = useState([])\n\n  const checkGameComplexity = () => {\n    let complexityLevel\n    let arr = [...new Array(3)]\n\n    switch (complexity) {\n      case 'lowComplexity':\n        complexityLevel = 1\n        break\n\n      case 'midComplexity':\n        complexityLevel = 2\n        break\n\n      case 'highComplexity':\n        complexityLevel = 3\n        break\n\n      default: break;\n    }\n\n    return arr.map((el, idx) => {\n      if (idx + 1 <= complexityLevel) {\n        return (\n          <svg key={idx} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-star-fill\" viewBox=\"0 0 16 16\">\n            <path d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\" />\n          </svg>\n        )\n      } else {\n        return (\n          <svg key={idx} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-star\" viewBox=\"0 0 16 16\">\n            <path d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\" />\n          </svg>\n        )\n      }\n    })\n\n  }\n\n  const selectCard = (value) => {\n    if (selectedCards.length !== 2) {\n      let candidate\n      let arr\n      for (let i = 0; i < selectedCards.length; i++) {\n        if (selectedCards[i] == value.idx) candidate = true\n      }\n      if (candidate) {\n        arr = selectedCards.filter(el => el !== value.idx)\n        return setSelectedCards(arr)\n      }\n      setSelectedCards([...selectedCards, value])\n    }\n  }\n\n  useEffect(() => {\n    if (selectedCards.length == 2) {\n      if (selectedCards[0].el == selectedCards[1].el) {\n        let matchedCardsArr = [selectedCards[0], selectedCards[1]]\n        setMatchedCards([...matchedCards, ...matchedCardsArr])\n        setTimeout(() => {\n          setSelectedCards([])\n        }, 1000)\n      } else {\n        setTimeout(() => {\n          setMovesNum(movesNum + 1)\n          setSelectedCards([])\n        }, 1000)\n      }\n    }\n  }, [selectedCards])\n\n  useEffect(() => {\n    if (matchedCards.length == initialCardsArrLength) {\n      endGame()\n    }\n  }, [matchedCards])\n\n  const checkSelectedCards = (value) => {\n    let candidate\n    for (let i = 0; i < selectedCards.length; i++) {\n      if (selectedCards[i].idx == value) {\n        candidate = true\n      }\n    }\n    if (candidate) {\n      return 'selectedCard'\n    } else return ''\n  }\n\n  const checkMatchedCards = (value) => {\n    let candidate\n    for (let i = 0; i < matchedCards.length; i++) {\n      if (matchedCards[i].el == value) {\n        candidate = true\n      }\n    }\n    if (candidate) {\n      return 'matchedCard'\n    } else return ''\n  }\n\n  const createRandomNumbers = (length, max) => {\n    let arr = [];\n    while (arr.length < length / 2) {\n      let number = Math.floor(Math.random() * max) + 1;\n      if (arr.indexOf(number) === -1) arr.push(number);\n    }\n    return arr\n  }\n\n  useEffect(() => {\n    let arr = []\n    switch (complexity) {\n      case 'lowComplexity':\n        arr = createRandomNumbers(12, 100)\n        break\n\n      case 'midComplexity':\n        arr = createRandomNumbers(20, 100)\n        break\n\n      case 'highComplexity':\n        arr = createRandomNumbers(48, 100)\n        break\n\n      default: break;\n    }\n    let finalArr = [...arr, ...arr]\n    setCardsArr(finalArr)\n    setInitialCardsArrLength(finalArr.length)\n  }, [complexity])\n\n  const endGame = () => {\n    setIsGameStart(false)\n    setComplexity(null)\n    setSelectedCards([])\n    setMatchedCards([])\n    setMovesNum(0)\n    setTimer({ seconds: 0, minutes: 0 })\n  }\n\n\n  \n  const checkTimer = () => {\n    let m\n    let s\n    if (timer.seconds < 10) s = `0${timer.seconds}`; else s = timer.seconds\n    if (timer.minutes < 10) m = `0${timer.minutes}`; else m = timer.minutes\n    return `${m}:${s}`\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Matching Game</h1>\n      <div className=\"gameInfo\">\n        <div className=\"complexity\">{checkGameComplexity()}</div>\n        <div className=\"time\">{checkTimer()}</div>\n        <div className=\"moves\">{movesNum} Moves</div>\n        <div>\n          <svg onClick={() => endGame()} xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" className=\"bi bi-arrow-clockwise\" viewBox=\"0 0 16 16\">\n            <path fillRule=\"evenodd\" d=\"M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z\" />\n            <path d=\"M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z\" />\n          </svg>\n        </div>\n      </div>\n      <div className={`gameField ${complexity !== null && complexity}`}>\n        {cardsArr.map((el, idx) => {\n          return <div onClick={() => selectCard({ idx, el })} key={idx} className={`card ${checkSelectedCards(idx)} ${checkMatchedCards(el)}`}>\n            <span>{el}</span>\n          </div>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default StartGameComponent"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,MAAMC,kBAAkB,GAAG,MAAM;EAAA;EAE/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC;IAAEM,OAAO,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAE,CAAC,CAAC;EAC9D,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxE,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMkB,mBAAmB,GAAG,MAAM;IAChC,IAAIC,eAAe;IACnB,IAAIC,GAAG,GAAG,CAAC,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC,CAAC;IAE3B,QAAQX,UAAU;MAChB,KAAK,eAAe;QAClBS,eAAe,GAAG,CAAC;QACnB;MAEF,KAAK,eAAe;QAClBA,eAAe,GAAG,CAAC;QACnB;MAEF,KAAK,gBAAgB;QACnBA,eAAe,GAAG,CAAC;QACnB;MAEF;QAAS;IAAM;IAGjB,OAAOC,GAAG,CAACE,GAAG,CAAC,CAACC,EAAE,EAAEC,GAAG,KAAK;MAC1B,IAAIA,GAAG,GAAG,CAAC,IAAIL,eAAe,EAAE;QAC9B,oBACE;UAAe,KAAK,EAAC,4BAA4B;UAAC,KAAK,EAAC,IAAI;UAAC,MAAM,EAAC,IAAI;UAAC,IAAI,EAAC,cAAc;UAAC,SAAS,EAAC,iBAAiB;UAAC,OAAO,EAAC,WAAW;UAAA,uBAC1I;YAAM,CAAC,EAAC;UAA4P;YAAA;YAAA;YAAA;UAAA;QAAG,GAD/PK,GAAG;UAAA;UAAA;UAAA;QAAA,QAEP;MAEV,CAAC,MAAM;QACL,oBACE;UAAe,KAAK,EAAC,4BAA4B;UAAC,KAAK,EAAC,IAAI;UAAC,MAAM,EAAC,IAAI;UAAC,IAAI,EAAC,cAAc;UAAC,SAAS,EAAC,YAAY;UAAC,OAAO,EAAC,WAAW;UAAA,uBACrI;YAAM,CAAC,EAAC;UAA6e;YAAA;YAAA;YAAA;UAAA;QAAG,GADhfA,GAAG;UAAA;UAAA;UAAA;QAAA,QAEP;MAEV;IACF,CAAC,CAAC;EAEJ,CAAC;EAED,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAC5B,IAAId,aAAa,CAACe,MAAM,KAAK,CAAC,EAAE;MAC9B,IAAIC,SAAS;MACb,IAAIR,GAAG;MACP,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,aAAa,CAACe,MAAM,EAAEE,CAAC,EAAE,EAAE;QAC7C,IAAIjB,aAAa,CAACiB,CAAC,CAAC,IAAIH,KAAK,CAACF,GAAG,EAAEI,SAAS,GAAG,IAAI;MACrD;MACA,IAAIA,SAAS,EAAE;QACbR,GAAG,GAAGR,aAAa,CAACkB,MAAM,CAACP,EAAE,IAAIA,EAAE,KAAKG,KAAK,CAACF,GAAG,CAAC;QAClD,OAAOX,gBAAgB,CAACO,GAAG,CAAC;MAC9B;MACAP,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAEc,KAAK,CAAC,CAAC;IAC7C;EACF,CAAC;EAED3B,SAAS,CAAC,MAAM;IACd,IAAIa,aAAa,CAACe,MAAM,IAAI,CAAC,EAAE;MAC7B,IAAIf,aAAa,CAAC,CAAC,CAAC,CAACW,EAAE,IAAIX,aAAa,CAAC,CAAC,CAAC,CAACW,EAAE,EAAE;QAC9C,IAAIQ,eAAe,GAAG,CAACnB,aAAa,CAAC,CAAC,CAAC,EAAEA,aAAa,CAAC,CAAC,CAAC,CAAC;QAC1DK,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAE,GAAGe,eAAe,CAAC,CAAC;QACtDC,UAAU,CAAC,MAAM;UACfnB,gBAAgB,CAAC,EAAE,CAAC;QACtB,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,MAAM;QACLmB,UAAU,CAAC,MAAM;UACf7B,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;UACzBW,gBAAgB,CAAC,EAAE,CAAC;QACtB,CAAC,EAAE,IAAI,CAAC;MACV;IACF;EACF,CAAC,EAAE,CAACD,aAAa,CAAC,CAAC;EAEnBb,SAAS,CAAC,MAAM;IACd,IAAIiB,YAAY,CAACW,MAAM,IAAInB,qBAAqB,EAAE;MAChDyB,OAAO,EAAE;IACX;EACF,CAAC,EAAE,CAACjB,YAAY,CAAC,CAAC;EAElB,MAAMkB,kBAAkB,GAAIR,KAAK,IAAK;IACpC,IAAIE,SAAS;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,aAAa,CAACe,MAAM,EAAEE,CAAC,EAAE,EAAE;MAC7C,IAAIjB,aAAa,CAACiB,CAAC,CAAC,CAACL,GAAG,IAAIE,KAAK,EAAE;QACjCE,SAAS,GAAG,IAAI;MAClB;IACF;IACA,IAAIA,SAAS,EAAE;MACb,OAAO,cAAc;IACvB,CAAC,MAAM,OAAO,EAAE;EAClB,CAAC;EAED,MAAMO,iBAAiB,GAAIT,KAAK,IAAK;IACnC,IAAIE,SAAS;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,YAAY,CAACW,MAAM,EAAEE,CAAC,EAAE,EAAE;MAC5C,IAAIb,YAAY,CAACa,CAAC,CAAC,CAACN,EAAE,IAAIG,KAAK,EAAE;QAC/BE,SAAS,GAAG,IAAI;MAClB;IACF;IACA,IAAIA,SAAS,EAAE;MACb,OAAO,aAAa;IACtB,CAAC,MAAM,OAAO,EAAE;EAClB,CAAC;EAED,MAAMQ,mBAAmB,GAAG,CAACT,MAAM,EAAEU,GAAG,KAAK;IAC3C,IAAIjB,GAAG,GAAG,EAAE;IACZ,OAAOA,GAAG,CAACO,MAAM,GAAGA,MAAM,GAAG,CAAC,EAAE;MAC9B,IAAIW,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,GAAG,CAAC,GAAG,CAAC;MAChD,IAAIjB,GAAG,CAACsB,OAAO,CAACJ,MAAM,CAAC,KAAK,CAAC,CAAC,EAAElB,GAAG,CAACuB,IAAI,CAACL,MAAM,CAAC;IAClD;IACA,OAAOlB,GAAG;EACZ,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACd,IAAIqB,GAAG,GAAG,EAAE;IACZ,QAAQV,UAAU;MAChB,KAAK,eAAe;QAClBU,GAAG,GAAGgB,mBAAmB,CAAC,EAAE,EAAE,GAAG,CAAC;QAClC;MAEF,KAAK,eAAe;QAClBhB,GAAG,GAAGgB,mBAAmB,CAAC,EAAE,EAAE,GAAG,CAAC;QAClC;MAEF,KAAK,gBAAgB;QACnBhB,GAAG,GAAGgB,mBAAmB,CAAC,EAAE,EAAE,GAAG,CAAC;QAClC;MAEF;QAAS;IAAM;IAEjB,IAAIQ,QAAQ,GAAG,CAAC,GAAGxB,GAAG,EAAE,GAAGA,GAAG,CAAC;IAC/BL,WAAW,CAAC6B,QAAQ,CAAC;IACrBnC,wBAAwB,CAACmC,QAAQ,CAACjB,MAAM,CAAC;EAC3C,CAAC,EAAE,CAACjB,UAAU,CAAC,CAAC;EAEhB,MAAMuB,OAAO,GAAG,MAAM;IACpBY,cAAc,CAAC,KAAK,CAAC;IACrBlC,aAAa,CAAC,IAAI,CAAC;IACnBE,gBAAgB,CAAC,EAAE,CAAC;IACpBI,eAAe,CAAC,EAAE,CAAC;IACnBd,WAAW,CAAC,CAAC,CAAC;IACdE,QAAQ,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAC,CAAC;EACtC,CAAC;EAID,MAAMuC,UAAU,GAAG,MAAM;IACvB,IAAIC,CAAC;IACL,IAAIC,CAAC;IACL,IAAI5C,KAAK,CAACE,OAAO,GAAG,EAAE,EAAE0C,CAAC,GAAI,IAAG5C,KAAK,CAACE,OAAQ,EAAC,CAAC,KAAM0C,CAAC,GAAG5C,KAAK,CAACE,OAAO;IACvE,IAAIF,KAAK,CAACG,OAAO,GAAG,EAAE,EAAEwC,CAAC,GAAI,IAAG3C,KAAK,CAACG,OAAQ,EAAC,CAAC,KAAMwC,CAAC,GAAG3C,KAAK,CAACG,OAAO;IACvE,OAAQ,GAAEwC,CAAE,IAAGC,CAAE,EAAC;EACpB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,eACtB;MAAK,SAAS,EAAC,UAAU;MAAA,wBACvB;QAAK,SAAS,EAAC,YAAY;QAAA,UAAE9B,mBAAmB;MAAE;QAAA;QAAA;QAAA;MAAA,QAAO,eACzD;QAAK,SAAS,EAAC,MAAM;QAAA,UAAE4B,UAAU;MAAE;QAAA;QAAA;QAAA;MAAA,QAAO,eAC1C;QAAK,SAAS,EAAC,OAAO;QAAA,WAAE5C,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QAAa,eAC7C;QAAA,uBACE;UAAK,OAAO,EAAE,MAAM+B,OAAO,EAAG;UAAC,KAAK,EAAC,4BAA4B;UAAC,KAAK,EAAC,IAAI;UAAC,MAAM,EAAC,IAAI;UAAC,IAAI,EAAC,cAAc;UAAC,SAAS,EAAC,uBAAuB;UAAC,OAAO,EAAC,WAAW;UAAA,wBAChK;YAAM,QAAQ,EAAC,SAAS;YAAC,CAAC,EAAC;UAAiE;YAAA;YAAA;YAAA;UAAA,QAAG,eAC/F;YAAM,CAAC,EAAC;UAAqG;YAAA;YAAA;YAAA;UAAA,QAAG;QAAA;UAAA;UAAA;UAAA;QAAA;MAC5G;QAAA;QAAA;QAAA;MAAA,QACF;IAAA;MAAA;MAAA;MAAA;IAAA,QACF,eACN;MAAK,SAAS,EAAG,aAAYvB,UAAU,KAAK,IAAI,IAAIA,UAAW,EAAE;MAAA,UAC9DI,QAAQ,CAACQ,GAAG,CAAC,CAACC,EAAE,EAAEC,GAAG,KAAK;QACzB,oBAAO;UAAK,OAAO,EAAE,MAAMC,UAAU,CAAC;YAAED,GAAG;YAAED;UAAG,CAAC,CAAE;UAAW,SAAS,EAAG,QAAOW,kBAAkB,CAACV,GAAG,CAAE,IAAGW,iBAAiB,CAACZ,EAAE,CAAE,EAAE;UAAA,uBAClI;YAAA,UAAOA;UAAE;YAAA;YAAA;YAAA;UAAA;QAAQ,GADsCC,GAAG;UAAA;UAAA;UAAA;QAAA,QAEtD;MACR,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACE;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAA,GAvLKvB,kBAAkB;AAAA,KAAlBA,kBAAkB;AAyLxB,eAAeA,kBAAkB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}